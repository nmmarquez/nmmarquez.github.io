<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>nmmarquez.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Demography, Data Science, and other Deliberations</description>
   <language>en-uk</language>
   <managingEditor> Neal</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Simulating Spatially Correlated Data</title>
	  <link>//simulating-spatial-data</link>
	  <author>Neal</author>
	  <pubDate>2016-03-19T14:47:00-07:00</pubDate>
	  <guid>//simulating-spatial-data</guid>
	  <description><![CDATA[
	     <p>A couple of weeks ago I ran into a problem where I needed to create some spatially correlated data for a project and I
realized that I didn&#39;t know the first thing about how to go about doing it. I was lucky to find that the
<a href="http://arxiv.org/abs/1601.01180">paper</a> that I was trying to replicate did a great job of detailing their methods in
such a way that I was able to create some spatial data of my own. The idea is that you need to create a covariance
matrix of the relationships of your data to pull form a multivariate random normal distribution.</p>

<p>\[
\mathcal{N}(\mu, \Sigma)
\]</p>

<p>\(\mu\) is just the scalar mean and can be set to any real number but defining a sensible covariance matrix was
originally difficult. The way that Riebler et al. did it was by using a matrix Q</p>

<p>\[
\begin{align*} 
Q_{i,j}= \begin{cases} n_{\delta_{i}},& \text{if  } i = j \\
-1,              & \text{if  } i \sim j \\ 
0, & \text{otherwise} \end{cases} 
\end{align*}
\]</p>

<p>where \(\delta_{i}\) is the number of neighbors a location has and \(i \sim j\) means that the two locations are
adjacent. Im used to working with spatial polygons data frames in R and found that its pretty easy to create this
matrix with the right packages. Here&#39;s an example with US state shape file.</p>

<pre><code>library(sp)
library(surveillance)
library(spdep)
library(MASS)

# load in some USA data to work with
load(url(&quot;http://biogeo.ucdavis.edu/data/gadm2/R/USA_adm2.RData&quot;))
cont_usa_locs &lt;- c(&quot;Texas&quot;, &quot;Louisiana&quot;)

# spatial polygons data frame to simulate from
cont_usa &lt;- gadm[(gadm@data$NAME_1 %in% cont_usa_locs),]
cont_usa$ID &lt;- 1:length(cont_usa)

# adjacency matrix for spatial data 1&#39;s if adjacent 0 otherwise
adjmat &lt;- poly2adjmat(cont_usa)

# Create Q from an adjacency matrix
n_delta_i &lt;- rowSums(adjmat)
Q &lt;- adjmat * -1
diag(Q) &lt;- n_delta_i
</code></pre>

<p>Using the inverse of Q as the covariance matrix creates a smooth spatial dispersion, that you can see below, when
compared to just simple dispersion at random. A more complete example can be found
<a href="https://github.com/nmmarquez/spatial_epi/blob/master/project/project_outlay.r">here</a>.</p>

<p><img src="/assets/images/spatial_sim_plot.png" alt="Alt text" title="If it fits I sits."/></p>

	  ]]></description>
	</item>


</channel>
</rss>
